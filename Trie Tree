#define MAX 26
struct TrieNode {
    int count;
    char ch;
    struct TrieNode * child[MAX];
};

/** Initialize your data structure here. */
struct TrieNode* trieCreate() {
    int i;
    struct TrieNode * pt = (struct TrieNode *)malloc(sizeof(struct TrieNode));
    pt->ch = ' ';
    pt->count = 0;
    for(i=0;i<MAX;i++)
        pt->child[i] = NULL;
    return pt;
}

struct TrieNode * createTrieNode(char c){ 
 	int i; 
    struct TrieNode * pt = ( struct TrieNode *)malloc(sizeof( struct TrieNode)); 
 	pt->ch = c; 
 	pt->count = 0;  //记录单词数量及是否为有效单词 
	for(i=0;i<MAX;i++) 
 		pt->child[i] = NULL; 
 	return pt; 
 } 


/** Inserts a word into the trie. */
void insert(struct TrieNode* root, char* word) {
    struct TrieNode * pt = root;
    while(*word){
        if( pt->child[ *word - 'a' ] == NULL )
            pt->child[*word - 'a'] = createTrieNode(*word);
        pt = pt->child[ *word - 'a' ];
        word ++;
    }
    pt->count++;
}

/** Returns if the word is in the trie. */
bool search(struct TrieNode* root, char* word) {
    struct TrieNode * pt = root;
    while(*word){
        if( pt->child[ *word - 'a' ] == NULL )
            break;
        pt = pt->child[*word - 'a'];
        word ++;
    }
    if( (*word == '\0') && (pt->count > 0) ) 
        return true;
    else
        return false;
}

/** Returns if there is any word in the trie 
    that starts with the given prefix. */
bool startsWith(struct TrieNode* root, char* prefix) {

    struct TrieNode * pt = root;
    while(*prefix){
        if( pt->child[ *prefix - 'a' ] == NULL )
            break;
        pt = pt->child[*prefix - 'a'];
        prefix ++;
    }
    if( *prefix == '\0' ) 
        return true;
    else
        return false;
}

/** Deallocates memory previously allocated for the TrieNode. */
void trieFree(struct TrieNode* root) {
    int i;
    if( !root )
    return ;
    
    for(i=0;i<MAX;i++)
        trieFree(root->child[i]);
    free(root);
}
